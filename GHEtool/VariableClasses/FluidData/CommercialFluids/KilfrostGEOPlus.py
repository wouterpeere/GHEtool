"""
This file contains the data of the Kilfrost GEO PLUS antifreeze from Kilfrost.
Visit https://kilfrost.com/kilfrost-geo-plus for more information.
"""

import numpy as np

from GHEtool.VariableClasses.FluidData.CommercialFluids._CommercialFluids import _CommercialFluids


class KilfrostGEOPlus(_CommercialFluids):

    def __init__(self, volume_ratio: float):
        super().__init__(volume_ratio)

        self._temperatures = np.arange(40, -40, -5)
        self._volume_ratio_array = np.array([27, 35, 39, 42, 49, 55, 65]) / 100

        self._freezing_array = np.array([-10, -15, -17.5, -20, -25, -30, -40])
        self._k_f_array = np.array([
            [0.565, 0.546, 0.536, 0.529, 0.512, 0.498, 0.474],  # 40°C
            [0.559, 0.540, 0.531, 0.524, 0.507, 0.493, 0.470],  # 35°C
            [0.553, 0.534, 0.525, 0.518, 0.502, 0.488, 0.466],  # 30°C
            [0.546, 0.528, 0.519, 0.512, 0.497, 0.483, 0.461],  # 25°C
            [0.539, 0.522, 0.513, 0.506, 0.491, 0.478, 0.456],  # 20°C
            [0.532, 0.515, 0.507, 0.500, 0.485, 0.473, 0.452],  # 15°C
            [0.524, 0.508, 0.500, 0.494, 0.479, 0.467, 0.447],  # 10°C
            [0.516, 0.501, 0.493, 0.487, 0.473, 0.461, 0.441],  # 5°C
            [0.508, 0.493, 0.485, 0.480, 0.466, 0.455, 0.436],  # 0°C
            [0.500, 0.485, 0.478, 0.472, 0.459, 0.449, 0.430],  # -5°C
            [np.nan, 0.477, 0.470, 0.465, 0.452, 0.442, 0.425],  # -10°C
            [np.nan, np.nan, 0.462, 0.457, 0.445, 0.435, 0.419],  # -15°C
            [np.nan, np.nan, np.nan, np.nan, 0.437, 0.428, 0.412],  # -20°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, 0.421, 0.406],  # -25°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 0.400],  # -30°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 0.393],  # -35°C
        ])  # W/(mK)

        self._rho_array = np.array([
            [1.0924, 1.1227, 1.1359, 1.1481, 1.1700, 1.1905, 1.2281],  # 40°C
            [1.0948, 1.1252, 1.1385, 1.1507, 1.1730, 1.1933, 1.2311],  # 35°C
            [1.0970, 1.1276, 1.1410, 1.1533, 1.1760, 1.1960, 1.2340],  # 30°C
            [1.0992, 1.1299, 1.1434, 1.1558, 1.1783, 1.1987, 1.2369],  # 25°C
            [1.1012, 1.1322, 1.1457, 1.1582, 1.1810, 1.2013, 1.2397],  # 20°C
            [1.1032, 1.1343, 1.1480, 1.1606, 1.1830, 1.2039, 1.2425],  # 15°C
            [1.1050, 1.1363, 1.1501, 1.1628, 1.1860, 1.2064, 1.2452],  # 10°C
            [1.1066, 1.1383, 1.1522, 1.1650, 1.1880, 1.2088, 1.2478],  # 5°C
            [1.1082, 1.1401, 1.1541, 1.1670, 1.1900, 1.2112, 1.2504],  # 0°C
            [1.1096, 1.1418, 1.1560, 1.1690, 1.1920, 1.2135, 1.2529],  # -5°C
            [np.nan, 1.1434, 1.1577, 1.1709, 1.1950, 1.2157, 1.2554],  # -10°C
            [np.nan, np.nan, 1.1594, 1.1727, 1.1970, 1.2179, 1.2578],  # -15°C
            [np.nan, np.nan, np.nan, np.nan, 1.1990, 1.2200, 1.2602],  # -20°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, 1.2221, 1.2625],  # -25°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 1.2648],  # -30°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 1.2671],  # -35°C
        ]) * 1000  # kg/cm³

        self._mu_array = np.array([
            [1.2166, 1.4830, 1.6334, 1.7952, 2.1532, 2.5660, 3.8211],  # 40°C
            [1.3448, 1.6473, 1.8188, 2.0037, 2.4147, 2.8916, 4.3553],  # 35°C
            [1.4966, 1.8429, 2.0399, 2.2529, 2.7287, 3.2847, 5.0096],  # 30°C
            [1.6782, 2.0782, 2.3065, 2.5541, 3.1100, 3.7648, 5.8214],  # 25°C
            [1.8979, 2.3643, 2.6316, 2.9223, 3.5785, 4.3586, 6.8432],  # 20°C
            [2.1666, 2.7168, 3.0331, 3.3783, 4.1619, 5.1033, 8.1498],  # 15°C
            [2.4998, 3.1570, 3.5361, 3.9509, 4.8991, 6.0520, 9.8500],  # 10°C
            [2.9189, 3.7152, 4.1759, 4.6815, 5.8456, 7.2815, 12.1053],  # 5°C
            [3.4550, 4.4355, 5.0042, 5.6301, 7.0829, 8.9059, 15.1621],  # 0°C
            [4.1533, 5.3832, 6.0975, 6.8857, 8.7321, 11.0988, 19.4047],  # -5°C
            [np.nan, 6.6574, 7.5721, 8.5836, 10.9782, 14.1314, 25.4508],  # -10°C
            [np.nan, np.nan, 9.6084, 10.9328, 14.1079, 18.4394, 34.3205],  # -15°C
            [np.nan, np.nan, np.nan, np.nan, 18.5708, 24.7430, 47.7546],  # -20°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, 34.2616, 68.8411],  # -25°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 103.4275],  # -30°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 164.3234],  # -35°C
        ]) * 1e-3  # convert from mPa.s to Pa.s

        self._cp_array = np.array([
            [3.325, 3.159, 3.083, 3.013, 2.888, 2.783, 2.635],  # 40°C
            [3.318, 3.151, 3.075, 3.004, 2.878, 2.773, 2.624],  # 35°C
            [3.310, 3.142, 3.066, 2.995, 2.868, 2.762, 2.612],  # 30°C
            [3.303, 3.134, 3.058, 2.986, 2.859, 2.752, 2.601],  # 25°C
            [3.295, 3.126, 3.049, 2.977, 2.849, 2.742, 2.589],  # 20°C
            [3.287, 3.118, 3.040, 2.968, 2.840, 2.732, 2.577],  # 15°C
            [3.280, 3.109, 3.032, 2.960, 2.830, 2.721, 2.566],  # 10°C
            [3.272, 3.101, 3.023, 2.951, 2.821, 2.711, 2.554],  # 5°C
            [3.265, 3.093, 3.015, 2.942, 2.811, 2.701, 2.543],  # 0°C
            [3.257, 3.085, 3.006, 2.933, 2.802, 2.691, 2.531],  # -5°C
            [np.nan, 3.077, 2.998, 2.924, 2.792, 2.681, 2.520],  # -10°C
            [np.nan, np.nan, 2.989, 2.915, 2.783, 2.670, 2.508],  # -15°C
            [np.nan, np.nan, np.nan, np.nan, 2.773, 2.660, 2.497],  # -20°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, 2.650, 2.485],  # -25°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 2.474],  # -30°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 2.462],  # -35°C
        ]) * 1000  # J/(kgK)

        if self.check_volume_ratio(volume_ratio):
            self._volume_ratio = volume_ratio

        # update nan values
        self._fill_nan_values_vertically()
