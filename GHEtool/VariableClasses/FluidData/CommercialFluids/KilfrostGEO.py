"""
This file contains the data of the Kilfrost GEO antifreeze from Kilfrost.
Visit https://kilfrost.com/kilfrost-geo for more information.
"""

import numpy as np

from GHEtool.VariableClasses.FluidData.CommercialFluids._CommercialFluids import _CommercialFluids


class KilfrostGEO(_CommercialFluids):

    def __init__(self, volume_ratio: float):
        super().__init__(volume_ratio)

        self._temperatures = np.arange(40, -40, -5)
        self._volume_ratio_array = np.array([20, 24, 32, 35, 39, 50, 60]) / 100

        self._freezing_array = np.array([-8.3, -10, -15, -17.5, -20, -30, -40])
        self._k_f_array = np.array([
            [0.579, 0.570, 0.550, 0.541, 0.532, 0.503, 0.479],  # 40°C
            [0.572, 0.564, 0.544, 0.536, 0.527, 0.499, 0.475],  # 35°C
            [0.566, 0.558, 0.538, 0.530, 0.521, 0.494, 0.471],  # 30°C
            [0.559, 0.551, 0.532, 0.524, 0.516, 0.489, 0.466],  # 25°C
            [0.552, 0.544, 0.526, 0.518, 0.510, 0.483, 0.461],  # 20°C
            [0.544, 0.537, 0.519, 0.511, 0.503, 0.478, 0.456],  # 15°C
            [0.536, 0.529, 0.512, 0.504, 0.497, 0.472, 0.451],  # 10°C
            [0.528, 0.521, 0.504, 0.497, 0.490, 0.466, 0.446],  # 5°C
            [0.519, 0.512, 0.496, 0.489, 0.482, 0.459, 0.440],  # 0°C
            [0.510, 0.504, 0.488, 0.482, 0.475, 0.453, 0.435],  # -5°C
            [np.nan, np.nan, 0.480, 0.473, 0.467, 0.446, 0.429],  # -10°C
            [np.nan, np.nan, np.nan, 0.465, 0.459, 0.439, 0.422],  # -15°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, 0.432, 0.416],  # -20°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, 0.424, 0.409],  # -25°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 0.403],  # -30°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 0.396],  # -35°C
        ])  # W/(mK)

        self._rho_array = np.array([
            [1.0803, 1.0910, 1.1208, 1.1347, 1.1479, 1.1939, 1.2291],  # 40°C
            [1.0825, 1.0933, 1.1232, 1.1371, 1.1504, 1.1967, 1.2322],  # 35°C
            [1.0847, 1.0955, 1.1255, 1.1396, 1.1529, 1.1995, 1.2352],  # 30°C
            [1.0868, 1.0977, 1.1278, 1.1419, 1.1553, 1.2021, 1.2382],  # 25°C
            [1.0888, 1.0997, 1.1300, 1.1442, 1.1576, 1.2047, 1.2411],  # 20°C
            [1.0908, 1.1017, 1.1322, 1.1464, 1.1599, 1.2073, 1.2439],  # 15°C
            [1.0926, 1.1037, 1.1342, 1.1485, 1.1621, 1.2098, 1.2466],  # 10°C
            [1.0945, 1.1055, 1.1362, 1.1506, 1.1643, 1.2122, 1.2493],  # 5°C
            [1.0962, 1.1073, 1.1382, 1.1526, 1.1663, 1.2145, 1.2519],  # 0°C
            [1.0979, 1.1091, 1.1401, 1.1545, 1.1683, 1.2168, 1.2545],  # -5°C
            [np.nan, np.nan, 1.1419, 1.1564, 1.1703, 1.2190, 1.2570],  # -10°C
            [np.nan, np.nan, np.nan, 1.1582, 1.1722, 1.2212, 1.2594],  # -15°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, 1.2233, 1.2618],  # -20°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, 1.2253, 1.2641],  # -25°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 1.2663],  # -30°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 1.2688],  # -35°C
        ]) * 1000  # kg/m³

        self._mu_array = np.array([
            [1.1409, 1.2336, 1.5255, 1.6893, 1.8708, 2.8132, 4.2000],  # 40°C
            [1.2591, 1.3644, 1.6961, 1.8830, 2.0908, 3.1778, 4.8001],  # 35°C
            [1.3988, 1.5193, 1.8993, 2.1141, 2.3539, 3.6184, 5.5376],  # 30°C
            [1.5658, 1.7049, 2.1438, 2.3928, 2.6720, 4.1576, 6.4559],  # 25°C
            [1.7674, 1.9297, 2.4416, 2.7330, 3.0616, 4.8262, 7.6162],  # 20°C
            [2.0138, 2.2053, 2.8090, 3.1539, 3.5450, 5.6673, 9.1059],  # 15°C
            [2.3188, 2.5479, 3.2686, 3.6821, 4.1539, 6.7430, 11.0525],  # 10°C
            [2.7019, 2.9800, 3.8528, 4.3555, 4.9336, 8.1437, 13.6468],  # 5°C
            [3.1905, 3.5339, 4.6078, 5.2289, 5.9497, 10.0050, 17.1805],  # 0°C
            [3.8239, 4.2563, 5.6013, 6.3828, 7.3000, 12.5353, 22.1121],  # -5°C
            [np.nan, np.nan, 6.9329, 7.9363, 9.1305, 16.0623, 29.1829],  # -10°C
            [np.nan, np.nan, np.nan, 10.0644, 11.6600, 21.1147, 39.6298],  # -15°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, 28.5583, 55.5932],  # -20°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, 39.8041, 80.9717],  # -25°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 123.5548],  # -30°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 202.4194],  # -35°C
        ]) * 1e-3  # convert from mPa.s to Pa.s

        self._cp_array = np.array([
            [3.6367, 3.572, 3.388, 3.300, 3.215, 2.914, 2.688],  # 40°C
            [3.6205, 3.555, 3.368, 3.279, 3.194, 2.893, 2.670],  # 35°C
            [3.6044, 3.537, 3.348, 3.258, 3.172, 2.871, 2.652],  # 30°C
            [3.5885, 3.520, 3.328, 3.238, 3.151, 2.849, 2.634],  # 25°C
            [3.5729, 3.503, 3.308, 3.217, 3.129, 2.827, 2.615],  # 20°C
            [3.5575, 3.487, 3.289, 3.196, 3.108, 2.805, 2.596],  # 15°C
            [3.5425, 3.471, 3.270, 3.176, 3.087, 2.782, 2.577],  # 10°C
            [3.5280, 3.455, 3.251, 3.156, 3.066, 2.760, 2.557],  # 5°C
            [3.5139, 3.439, 3.232, 3.136, 3.045, 2.738, 2.538],  # 0°C
            [3.5004, 3.425, 3.214, 3.117, 3.025, 2.717, 2.519],  # -5°C
            [np.nan, np.nan, 3.197, 3.098, 3.005, 2.695, 2.499],  # -10°C
            [np.nan, np.nan, np.nan, np.nan, 2.985, 2.674, 2.480],  # -15°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, 2.653, 2.461],  # -20°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, 2.632, 2.443],  # -25°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 2.424],  # -30°C
            [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 2.406],  # -35°C
        ]) * 1000  # J/(kgK)

        if self.check_volume_ratio(volume_ratio):
            self._volume_ratio = volume_ratio

        # update nan values
        self._fill_nan_values_vertically()
